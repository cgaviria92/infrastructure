name: Test and Quality Check

on:
  pull_request:
    branches: [ main, develop ]
  push:
    branches: [ develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.11', '3.12']
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_wpa
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libpq-dev

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r coreapp/requirements.txt
        pip install coverage pytest-django pytest-cov flake8 black isort

    - name: Lint with flake8
      working-directory: ./coreapp
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Check code formatting with black
      working-directory: ./coreapp
      run: |
        black --check --diff .

    - name: Check import sorting with isort
      working-directory: ./coreapp
      run: |
        isort --check-only --diff .

    - name: Run Django system checks
      working-directory: ./coreapp
      env:
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/test_wpa
        REDIS_URL: redis://localhost:6379/0
        DJANGO_SETTINGS_MODULE: coreapp.settings
        DJANGO_SECRET_KEY: test-secret-key
      run: |
        python manage.py check
        python manage.py check --deploy

    - name: Run migrations
      working-directory: ./coreapp
      env:
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/test_wpa
        REDIS_URL: redis://localhost:6379/0
        DJANGO_SETTINGS_MODULE: coreapp.settings
        DJANGO_SECRET_KEY: test-secret-key
      run: |
        python manage.py migrate

    - name: Run tests with coverage
      working-directory: ./coreapp
      env:
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/test_wpa
        REDIS_URL: redis://localhost:6379/0
        DJANGO_SETTINGS_MODULE: coreapp.settings
        DJANGO_SECRET_KEY: test-secret-key
      run: |
        coverage run --source='.' manage.py test
        coverage report --show-missing
        coverage xml

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coreapp/coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  security-scan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Run security scan with bandit
      run: |
        pip install bandit[toml]
        bandit -r coreapp/ -f json -o bandit-report.json || true

    - name: Upload security scan results
      uses: actions/upload-artifact@v3
      with:
        name: security-scan-results
        path: bandit-report.json

  docker-test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Build Docker image
      run: |
        docker build -t wpa-test .

    - name: Test Docker image
      run: |
        docker run --rm wpa-test python manage.py check

    - name: Security scan Docker image
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'wpa-test'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'
